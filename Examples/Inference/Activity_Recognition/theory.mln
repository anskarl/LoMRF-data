time = {0,...,551}

// Predicate schema definition

HoldsAt(fluent, time)
InitiatedAt(fluent, time)
TerminatedAt(fluent, time)

Happens(event, time)
Close(id, id, dist, time)
OrientationMove(id, id, time)
StartTime(time)

// Function schema definition
// --- input events
event walking(id)
event running(id)
event active(id)
event inactive(id)
event enter(id)
event exit(id)

// --- output composite events
fluent move(id,id)
fluent meet(id,id)

/**
 * Domain-independent Event Calculus axioms
 */
 
InitiatedAt(f, t) => HoldsAt(f, t++).

TerminatedAt(f, t) => !HoldsAt(f, t++).

HoldsAt(f, t) ^ !TerminatedAt(f, t) => HoldsAt(f, t++).

!HoldsAt(f, t) ^ !InitiatedAt(f, t) => !HoldsAt(f, t++).
 
/**
 * State that at the beginning of time nothing holds:
 */ 
StartTime(t) => !HoldsAt(f, t).

/**
 * Domain-dependent activity recognition definitions
 */

// --- People are moving together
#include "definitions/moving.mln"

// avoid recognising moving with himself
!HoldsAt(move(p, p), t).

// --- People are meeting
#include "definitions/meeting.mln"

// avoid recognising meeting with himself
!HoldsAt(meet(p, p), t).
