fluent={Loaded,Dead,Alive}
time={0,...,13}

HoldsAt(fluent,time)
InitiatedAt(fluent,time)
TerminatedAt(fluent,time)
Happens(event,time)
Next(time, time)

// Event Calculus
InitiatedAt(f, t) => HoldsAt(f, t++).
TerminatedAt(f, t) => !HoldsAt(f, t++).

HoldsAt(f,t) ^ !TerminatedAt(f, t) => HoldsAt(f,t++).
!HoldsAt(f,t) ^ !InitiatedAt(f, t) => !HoldsAt(f,t++).



/**
 * Domain Specific Axioms
 */

2 InitiatedAt(Loaded,t) :- Happens(Load,t)

2 TerminatedAt(Loaded,t) :- Happens(Shoot,t) ^ HoldsAt(Loaded,t)

2 InitiatedAt(Dead,t) :- Happens(Shoot,t) ^ HoldsAt(Loaded,t)

2 TerminatedAt(Alive,t) :- Happens(Shoot,t) ^ HoldsAt(Loaded,t)

// !TerminatedAt(Dead, t).
// !InitiatedAt(Alive,t).


// Initial state:

HoldsAt(Alive,0).
!HoldsAt(Dead,0).
!HoldsAt(Loaded, 0).
!InitiatedAt(f,0).
!TerminatedAt(f,0).

